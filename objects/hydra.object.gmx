<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 20

attacking = 0

life = 500

attack_timer = 0

current_attack = 0

to_shoot = 0

shoot_arc = 0

shoot_timer = 5

spine_speed = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shoot_arc == 1) {
    var inst = instance_create(x+20, y+40, projectile)
    var vec_x = -(x + 20 + (sprite_get_width(ball) / 2) - global.player_x)
    var vec_y = -(y + 40 + (sprite_get_height(ball) / 2) - global.player_y)
    
    var vec_size = sqrt((vec_x*vec_x) + (vec_y*vec_y))
    
    // Get unitary vector
    vec_x = vec_x / vec_size;
    vec_y = vec_y / vec_size;
    
    // Multiply vector by speed    
    inst.hspeed = vec_x * spine_speed
    inst.vspeed = vec_y * spine_speed
    
    
} else if(shoot_arc == 3) {
    var inst = instance_create(x+20, y+40, projectile)
    var inst2 = instance_create(x+20, y+40, projectile)
    var inst3 = instance_create(x+20, y+40, projectile)
    var vec_x = -(x + 20 + (sprite_get_width(ball) / 2) - global.player_x)
    var vec_y = -(y + 40 + (sprite_get_height(ball) / 2) - global.player_y)
    
    var vec_size = sqrt((vec_x*vec_x) + (vec_y*vec_y))
    
    // Get unitary vector
    vec_x = vec_x / vec_size;
    vec_y = vec_y / vec_size;

    // Multiply vector by speed    
    inst.hspeed = vec_x * spine_speed
    inst.vspeed = vec_y * spine_speed
    
    var theta = degtorad(-30)
    
    // Rotate vector in -30 degrees
    var vec_x_m30 = (vec_x * cos(theta)) - (vec_y * sin(theta));
    var vec_y_m30 = (vec_x * sin(theta)) + (vec_y * cos(theta));
    
    // Multiply vector by speed
    inst2.hspeed = vec_x_m30 * spine_speed
    inst2.vspeed = vec_y_m30 * spine_speed
    
    theta = degtorad(30)
    
    // Rotate vector in 30 degrees
    var vec_x_30 = (vec_x * cos(theta)) - (vec_y * sin(theta));
    var vec_y_30 = (vec_x * sin(theta)) + (vec_y * cos(theta));
    
    // Multiply vector by speed
    inst3.hspeed = vec_x_30 * spine_speed
    inst3.vspeed = vec_y_30 * spine_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = stand
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = attack

attacking = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attacking) {
    if(attack_timer &gt; 0) {
        attack_timer --
    } else {
        sprite_index = attack
        attack_timer = 50
        
        switch(current_attack) {
            case 0: {
                current_attack = 1
                
                if(life &gt; 200) {
                    shoot_one()
                } else {
                    shoot_three()
                }
                break
            }
            case 1: {
                current_attack = 2
                
                if(life &gt; 200) {
                    shoot_one()
                } else {
                    shoot_three()
                }
                break
            }
            case 2: {
                current_attack = 0
                
                if(life &gt; 200) {
                    shoot_three()
                } else {
                    shoot_nine()
                }
                break
            }
            default: { break }
        }

    }
}

if(to_shoot &gt; 0 &amp;&amp; alarm[1] &lt; 0) {
    alarm[1] = shoot_timer
    to_shoot--
}

if(life &lt;= 0) {
    var inst = instance_create(x, y, hydra_death);
    inst.image_xscale = image_xscale
    inst.image_yscale = image_yscale
    instance_destroy()
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
